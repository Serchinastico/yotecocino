{"version":3,"sources":["feature/wip/WorkInProgressScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","Title","DescriptionContainer","Description","p","HashTag","Illustration","img","WorkInProgressScreen","src","App","Routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+zCAIA,IAAMA,EAAYC,IAAOC,IAAV,KAMTC,EAAQF,IAAOC,IAAV,KAOLE,EAAuBH,IAAOC,IAAV,KAgBpBG,EAAcJ,IAAOK,EAAV,KAIXC,EAAUN,IAAOK,EAAV,KAOPE,EAAeP,IAAOQ,IAAV,KA0BHC,EAjBwB,WACrC,OACE,kBAACV,EAAD,KACE,kBAACG,EAAD,oBACA,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,yDADF,kIAIE,kBAACE,EAAD,qBAEF,kBAACC,EAAD,CAAcG,IAAI,sBCjCXC,EAtBO,WACpB,IAQMC,EAAS,WACb,OAAO,kBAAC,EAAD,OAGT,OACE,6BACE,kBAAC,IAAD,KACE,kBAACA,EAAD,SCZYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b34f3bd.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  font-size: 3rem;\n  font-family: \"Pacifico\", cursive;\n  color: #303240;\n  margin-top: 32px;\n`;\n\nconst DescriptionContainer = styled.div`\n  background: #fff;\n  border-radius: 16px;\n  box-shadow: 0px 8px 0px rgba(0, 0, 0, 0.1);\n  padding: 32px;\n  width: 310px;\n  height: 400px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  @media (max-width: 768px) {\n    margin-top: 60px;\n  }\n`;\n\nconst Description = styled.p`\n  background: white;\n`;\n\nconst HashTag = styled.p`\n  font-family: \"Pacifico\", cursive;\n  text-align: center;\n  font-size: 2rem;\n  margin: 0;\n`;\n\nconst Illustration = styled.img`\n  z-index: 10;\n  width: 420px;\n  height: 410px;\n  position: relative;\n  bottom: 40px;\n  right: 100px;\n`;\n\nconst WorkInProgressScreen: React.FC = () => {\n  return (\n    <Container>\n      <Title>#yotecocino</Title>\n      <DescriptionContainer>\n        <Description>\n          <b>Â¡Disponible muy pronto!</b> Estamos trabajando muy duro en la web\n          para tenerla disponible cuanto antes. Mientras tanto, estamos en\n          Twitter con el hashtag:\n          <HashTag>#yotecocino</HashTag>\n        </Description>\n        <Illustration src=\"img/il_wip.svg\"></Illustration>\n      </DescriptionContainer>\n    </Container>\n  );\n};\n\nexport default WorkInProgressScreen;\n","import React from \"react\";\nimport WelcomeScreen from \"feature/welcome/WelcomeScreen\";\nimport SearchScreen from \"feature/search/SearchScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchResultsScreen from \"feature/search/SearchResultsScreen\";\nimport { useQuery } from \"foundation/router/UseQuery\";\nimport \"./index.scss\";\nimport WorkInProgressScreen from \"feature/wip/WorkInProgressScreen\";\n\nconst App: React.FC = () => {\n  const parseLocation = (location: string) => {\n    const parts = location.split(\",\");\n    return {\n      latitude: Number(parts[0]),\n      longitude: Number(parts[1])\n    };\n  };\n\n  const Routes = () => {\n    return <WorkInProgressScreen />;\n  };\n\n  return (\n    <div>\n      <Router>\n        <Routes />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","/* istanbul ignore file */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* istanbul ignore file */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}