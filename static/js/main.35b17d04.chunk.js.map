{"version":3,"sources":["feature/welcome/WelcomeScreen.tsx","foundation/types/Service.ts","feature/search/SearchScreen.tsx","feature/search/components/ResultRow.tsx","feature/search/components/ResultList.tsx","feature/search/components/ResultMap.tsx","feature/search/SearchResultsScreen.tsx","App.tsx","foundation/router/UseQuery.ts","serviceWorker.ts","index.tsx"],"names":["Service","Container","styled","div","Title","OptionsContainer","OptionContainer","OptionTitle","p","OptionIllustration","img","WelcomeScreen","history","useHistory","AcceptFoodButton","onClick","push","src","ProvideFoodButton","form","InputTitle","TextInput","input","DateInput","ReactDatePicker","RadioInput","ButtonInput","SearchScreen","useState","address","setAddress","date","setDate","service","setService","onServiceChange","lunch","dinner","Error","onSubmit","formattedDate","dayjs","Date","format","type","placeholder","value","onChange","event","target","placeholderText","selected","minDate","id","name","htmlFor","Food","Address","Contact","ResultRow","offer","food","contact","ResultList","offers","map","key","Marker","AnyReactComponent","text","ResultMap","bootstrapURLKeys","defaultCenter","lat","lng","defaultZoom","coordinates","latitude","longitude","SearchResultsScreen","day","App","parseLocation","location","parts","split","Number","Routes","query","URLSearchParams","useLocation","search","path","get","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35b17d04.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  font-size: 3rem;\n  font-family: \"Pacifico\", cursive;\n  color: #303240;\n  margin-top: 32px;\n`;\n\nconst OptionsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    margin-top: 120px;\n  }\n`;\n\nconst OptionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: #fff;\n  border-radius: 16px;\n  box-shadow: 0px 8px 0px rgba(0, 0, 0, 0.1);\n  height: 320px;\n  width: 256px;\n  margin: 40px;\n  justify-content: center;\n  cursor: pointer;\n`;\n\nconst OptionTitle = styled.p`\n  font-size: 1.5rem;\n  text-align: center;\n  position: relative;\n  font-weight: 600;\n  top: 32px;\n`;\n\nconst OptionIllustration = styled.img`\n  position: relative;\n  bottom: 39px;\n  justify-self: flex-end;\n`;\n\nconst WelcomeScreen: React.FC = () => {\n  const history = useHistory();\n\n  const AcceptFoodButton = () => {\n    return (\n      <OptionContainer onClick={() => history.push(\"/search\")}>\n        <OptionTitle>Acepto comida</OptionTitle>\n        <OptionIllustration src={\"img/il_doctor.svg\"} />\n      </OptionContainer>\n    );\n  };\n\n  const ProvideFoodButton = () => {\n    return (\n      <OptionContainer>\n        <OptionTitle>Ofrezco comida</OptionTitle>\n        <OptionIllustration src={\"img/il_chef.svg\"} />\n      </OptionContainer>\n    );\n  };\n\n  return (\n    <Container>\n      <Title>#yotecocino</Title>\n      <OptionsContainer>\n        <AcceptFoodButton />\n        <ProvideFoodButton />\n      </OptionsContainer>\n    </Container>\n  );\n};\n\nexport default WelcomeScreen;\n","export enum Service {\n  lunch = \"Lunch\",\n  dinner = \"Dinner\"\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useHistory } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport { Service } from \"foundation/types/Service\";\n\nconst Container = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 500px;\n  background: #ffffff;\n  border-radius: 32px;\n  position: fixed;\n  padding: 32px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: 0px 8px 0px rgba(0, 0, 0, 0.1);\n`;\n\nconst InputTitle = styled.p`\n  padding: 0;\n  margin: 0;\n  margin-bottom: 4px;\n  margin-top: 16px;\n`;\n\nconst TextInput = styled.input`\n  border: 0.5px solid rgba(0, 0, 0, 0.2);\n  height: 40px;\n  width: 470px;\n  border-radius: 24px;\n  padding-left: 16px;\n  padding-right: 16px;\n  font-size: 0.9rem;\n  margin-top: 8px;\n  font-family: \"Montserrat\", sans-serif;\n\n  &::placeholder {\n    font-family: \"Montserrat\", sans-serif;\n  }\n`;\n\nconst DateInput = styled(ReactDatePicker)`\n  border: 0.5px solid rgba(0, 0, 0, 0.2);\n  height: 40px;\n  width: 470px;\n  border-radius: 24px;\n  padding-left: 16px;\n  padding-right: 16px;\n  font-size: 0.9rem;\n  margin-top: 8px;\n  font-family: \"Montserrat\", sans-serif;\n\n  &::placeholder {\n    font-family: \"Montserrat\", sans-serif;\n  }\n`;\n\nconst RadioInput = styled.input`\n  padding: 16px;\n  margin: 16px;\n  font-size: 1rem;\n`;\n\nconst ButtonInput = styled.input`\n  background: #e27861;\n  padding: 16px;\n  margin-top: 16px;\n  border-radius: 48px;\n  border: none;\n  width: 116px;\n  font-size: 1rem;\n  font-weight: 600;\n  color: #fff;\n  align-self: center;\n`;\n\nconst Title = styled.p`\n  font-weight: 600;\n  font-size: 1.2rem;\n  margin: 0;\n  margin-bottom: 16px;\n`;\n\nconst SearchScreen: React.FC = () => {\n  const history = useHistory();\n  const [address, setAddress] = useState<string | null>(null);\n  const [date, setDate] = useState<Date | null>(null);\n  const [service, setService] = useState<Service | null>(null);\n\n  const onFormSubmit = () => {\n    const latitude = 40.33333; // TODO Get from address with Google API\n    const longitude = -3.123131; // TODO Get from address with Google API\n    const formattedDate = dayjs(date ?? Date()).format(\"YYYY-MM-DD\");\n    history.push(\n      `/search/results?location=${latitude},${longitude}&day=${formattedDate}&service=${service}`\n    );\n  };\n\n  const onServiceChange = (service: string) => {\n    switch (service) {\n      case \"lunch\":\n        setService(Service.lunch);\n        break;\n      case \"dinner\":\n        setService(Service.dinner);\n        break;\n      default:\n        throw new Error(`Invalid service: ${service}`);\n    }\n  };\n\n  return (\n    <Container onSubmit={onFormSubmit}>\n      <Title>\n        Completa los siguientes campos para buscar una comida preparada\n      </Title>\n      <label>\n        <InputTitle>¿Dónde trabajas?</InputTitle>\n        <TextInput\n          type=\"text\"\n          placeholder=\"Calle y número\"\n          value={address ?? \"\"}\n          onChange={event => setAddress(event.target.value)}\n        />\n      </label>\n      <label>\n        <InputTitle>¿Qué día será la recogida?</InputTitle>\n        <DateInput\n          placeholderText=\"Selecciona el día\"\n          selected={date}\n          onChange={date => setDate(date)}\n          minDate={new Date()}\n        />\n      </label>\n      <label>\n        <InputTitle>¿Comida o cena?</InputTitle>\n        <RadioInput\n          type=\"radio\"\n          id=\"lunch\"\n          name=\"food_service\"\n          value=\"lunch\"\n          onChange={event => onServiceChange(event.target.value)}\n        />\n        <label htmlFor=\"lunch\">Comida</label>\n        <RadioInput\n          type=\"radio\"\n          id=\"dinner\"\n          name=\"food_service\"\n          value=\"dinner\"\n          onChange={event => onServiceChange(event.target.value)}\n        />\n        <label htmlFor=\"dinner\">Cena</label>\n      </label>\n      <ButtonInput type=\"submit\" value=\"Enviar\" />\n    </Container>\n  );\n};\n\nexport default SearchScreen;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Coordinates } from \"foundation/types/Coordinates\";\nimport { FoodOffer } from \"foundation/types/FoodOffer\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  background: #fff;\n  margin: 16px;\n  padding: 16px;\n`;\n\nconst Food = styled.p`\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst Address = styled.p`\n  margin: 0;\n`;\n\nconst Contact = styled.p`\n  margin: 0;\n  font-weight: 600;\n`;\n\ninterface Props {\n  offer: FoodOffer;\n}\n\nconst ResultRow: React.FC<Props> = ({ offer }) => {\n  return (\n    <Container>\n      <Food>{offer.food}</Food>\n      <Address>{offer.address}</Address>\n      <Contact>{offer.contact}</Contact>\n    </Container>\n  );\n};\n\nexport default ResultRow;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { FoodOffer } from \"foundation/types/FoodOffer\";\nimport ResultRow from \"./ResultRow\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  background: #002360;\n  padding-top: 24px;\n`;\n\ninterface Props {\n  offers: FoodOffer[];\n}\n\nconst ResultList: React.FC<Props> = ({ offers }) => {\n  return (\n    <Container>\n      {offers.map(offer => (\n        <ResultRow key={offer.food} offer={offer} />\n      ))}\n    </Container>\n  );\n};\n\nexport default ResultList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { FoodOffer } from \"foundation/types/FoodOffer\";\nimport GoogleMapReact from \"google-map-react\";\n\nconst Container = styled.div`\n  display: flex;\n  position: fixed;\n  flex-direction: column;\n  width: 50%;\n  height: 100%;\n  left: 50%;\n  background: #ff2360;\n`;\n\nconst Marker = styled.div`\n  width: 24px;\n  height: 24px;\n  background: #65ff12;\n  border-radius: 8px;\n`;\n\ninterface Props {\n  offers: FoodOffer[];\n}\n\nconst AnyReactComponent = ({ text }: any) => <Marker />;\n\nconst ResultMap: React.FC<Props> = ({ offers }) => {\n  const googleMapsApiKey = \"AIzaSyB0mGai6Dmu2WE8y5OLHZ2ci8orroLaOFo\";\n  return (\n    <Container>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: googleMapsApiKey }}\n        defaultCenter={{ lat: 40.3850959, lng: -3.6912495 }}\n        defaultZoom={17}\n      >\n        {offers.map(offer => (\n          <AnyReactComponent\n            lat={offer.coordinates.latitude}\n            lng={offer.coordinates.longitude}\n            text={offer.food}\n          ></AnyReactComponent>\n        ))}\n      </GoogleMapReact>\n    </Container>\n  );\n};\n\nexport default ResultMap;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Coordinates } from \"foundation/types/Coordinates\";\nimport ResultList from \"./components/ResultList\";\nimport ResultMap from \"./components/ResultMap\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  margin: 0;\n`;\n\ninterface Props {\n  coordinates: Coordinates;\n  day: string;\n  service: string;\n}\n\nconst SearchResultsScreen: React.FC<Props> = ({\n  coordinates,\n  day,\n  service\n}) => {\n  const offers = [\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    },\n    {\n      address: \"Calle embajadores\",\n      coordinates: { latitude: 40.3850959, longitude: -3.6912495 },\n      food: \"Albóndigas con salsa\",\n      contact: \"@Serchinastico\"\n    }\n  ];\n  return (\n    <Container>\n      <ResultList offers={offers} />\n      <ResultMap offers={offers} />\n    </Container>\n  );\n};\n\nexport default SearchResultsScreen;\n","import React from \"react\";\nimport WelcomeScreen from \"feature/welcome/WelcomeScreen\";\nimport SearchScreen from \"feature/search/SearchScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchResultsScreen from \"feature/search/SearchResultsScreen\";\nimport { useQuery } from \"foundation/router/UseQuery\";\nimport \"./index.scss\";\n\nconst App: React.FC = () => {\n  const parseLocation = (location: string) => {\n    const parts = location.split(\",\");\n    return {\n      latitude: Number(parts[0]),\n      longitude: Number(parts[1])\n    };\n  };\n\n  const Routes = () => {\n    const query = useQuery();\n\n    return (\n      <Switch>\n        <Route path=\"/search/results\">\n          <SearchResultsScreen\n            coordinates={parseLocation(query.get(\"location\") ?? \"0,0\")}\n            day={query.get(\"day\") ?? \"\"}\n            service={query.get(\"service\") ?? \"lunch\"}\n          />\n        </Route>\n        <Route exact path=\"/search\">\n          <SearchScreen />\n        </Route>\n        <Route path=\"/\">\n          <WelcomeScreen />\n        </Route>\n      </Switch>\n    );\n  };\n\n  return (\n    <div>\n      <Router>\n        <Routes />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","/* istanbul ignore file */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* istanbul ignore file */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}